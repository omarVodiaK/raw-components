import * as tslib_1 from "tslib";
/* tslint:disable */
/* auto-generated angular directive proxies */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';
let MyButton = class MyButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['myFocus', 'myBlur']);
    }
};
MyButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
MyButton = tslib_1.__decorate([
    ProxyCmp({
        inputs: ['buttonType', 'color', 'disabled', 'download', 'expand', 'fill', 'href', 'mode', 'rel', 'shape', 'size', 'strong', 'target', 'type']
    }),
    Component({
        selector: 'my-button',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: '<ng-content></ng-content>',
        inputs: ['buttonType', 'color', 'disabled', 'download', 'expand', 'fill', 'href', 'mode', 'rel', 'shape', 'size', 'strong', 'target', 'type'],
        outputs: ['myFocus', 'myBlur']
    })
], MyButton);
export { MyButton };
let WebCheckbox = class WebCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
WebCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
WebCheckbox = tslib_1.__decorate([
    ProxyCmp({
        inputs: ['_id', 'checked', 'description', 'disabled', 'error', 'label', 'name']
    }),
    Component({
        selector: 'web-checkbox',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: '<ng-content></ng-content>',
        inputs: ['_id', 'checked', 'description', 'disabled', 'error', 'label', 'name']
    })
], WebCheckbox);
export { WebCheckbox };
let WebDatepicker = class WebDatepicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
WebDatepicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
WebDatepicker = tslib_1.__decorate([
    ProxyCmp({
        inputs: ['class', 'disabled', 'forceCustom', 'localeCode', 'max', 'min', 'monthPicker', 'placeholder', 'value']
    }),
    Component({
        selector: 'web-datepicker',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: '<ng-content></ng-content>',
        inputs: ['class', 'disabled', 'forceCustom', 'localeCode', 'max', 'min', 'monthPicker', 'placeholder', 'value'],
        outputs: ['valueChange']
    })
], WebDatepicker);
export { WebDatepicker };
let WebModal = class WebModal {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['dimiss']);
    }
};
WebModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
WebModal = tslib_1.__decorate([
    ProxyCmp({
        inputs: ['backdropDismiss', 'centered', 'size', 'toggle']
    }),
    Component({
        selector: 'web-modal',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: '<ng-content></ng-content>',
        inputs: ['backdropDismiss', 'centered', 'size', 'toggle'],
        outputs: ['dimiss']
    })
], WebModal);
export { WebModal };
//# sourceMappingURL=data:application/json;base64,