/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color } from "./interfaces";
import { ModalSize } from "./components/modal/modal";
export namespace Components {
    interface MyButton {
        /**
          * The type of button.
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface WebCheckbox {
        "_id"?: string;
        "checked": boolean;
        "description"?: string | HTMLElement;
        "disabled"?: boolean;
        "error"?: string | HTMLElement;
        "label": HTMLElement;
        "name"?: string;
    }
    interface WebDatepicker {
        /**
          * Element class
         */
        "class"?: string;
        /**
          * Property sets whether datepicker is disabled
         */
        "disabled"?: boolean;
        /**
          * Property sets whether SEB styled datepicker will be rendered despite the browser used
         */
        "forceCustom"?: boolean;
        "localeCode": string;
        /**
          * Maximum range of date that can be selected
         */
        "max"?: Date;
        /**
          * Minimum range of date that can be selected
         */
        "min"?: Date;
        /**
          * Property sets whether a datepicker is a month picker
         */
        "monthPicker"?: boolean;
        /**
          * Element placeholder
         */
        "placeholder": string;
        "value": Date | null;
    }
    interface WebModal {
        "backdropDismiss"?: boolean;
        "centered"?: boolean;
        "size"?: ModalSize;
        "toggle"?: boolean;
    }
}
declare global {
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLWebCheckboxElement extends Components.WebCheckbox, HTMLStencilElement {
    }
    var HTMLWebCheckboxElement: {
        prototype: HTMLWebCheckboxElement;
        new (): HTMLWebCheckboxElement;
    };
    interface HTMLWebDatepickerElement extends Components.WebDatepicker, HTMLStencilElement {
    }
    var HTMLWebDatepickerElement: {
        prototype: HTMLWebDatepickerElement;
        new (): HTMLWebDatepickerElement;
    };
    interface HTMLWebModalElement extends Components.WebModal, HTMLStencilElement {
    }
    var HTMLWebModalElement: {
        prototype: HTMLWebModalElement;
        new (): HTMLWebModalElement;
    };
    interface HTMLElementTagNameMap {
        "my-button": HTMLMyButtonElement;
        "web-checkbox": HTMLWebCheckboxElement;
        "web-datepicker": HTMLWebDatepickerElement;
        "web-modal": HTMLWebModalElement;
    }
}
declare namespace LocalJSX {
    interface MyButton {
        /**
          * The type of button.
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Emitted when the button loses focus.
         */
        "onMyBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onMyFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface WebCheckbox {
        "_id"?: string;
        "checked"?: boolean;
        "description"?: string | HTMLElement;
        "disabled"?: boolean;
        "error"?: string | HTMLElement;
        "label"?: HTMLElement;
        "name"?: string;
    }
    interface WebDatepicker {
        /**
          * Element class
         */
        "class"?: string;
        /**
          * Property sets whether datepicker is disabled
         */
        "disabled"?: boolean;
        /**
          * Property sets whether SEB styled datepicker will be rendered despite the browser used
         */
        "forceCustom"?: boolean;
        "localeCode"?: string;
        /**
          * Maximum range of date that can be selected
         */
        "max"?: Date;
        /**
          * Minimum range of date that can be selected
         */
        "min"?: Date;
        /**
          * Property sets whether a datepicker is a month picker
         */
        "monthPicker"?: boolean;
        "onValueChange"?: (event: CustomEvent<any>) => void;
        /**
          * Element placeholder
         */
        "placeholder"?: string;
        "value"?: Date | null;
    }
    interface WebModal {
        "backdropDismiss"?: boolean;
        "centered"?: boolean;
        "onDimiss"?: (event: CustomEvent<any>) => void;
        "size"?: ModalSize;
        "toggle"?: boolean;
    }
    interface IntrinsicElements {
        "my-button": MyButton;
        "web-checkbox": WebCheckbox;
        "web-datepicker": WebDatepicker;
        "web-modal": WebModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            "web-checkbox": LocalJSX.WebCheckbox & JSXBase.HTMLAttributes<HTMLWebCheckboxElement>;
            "web-datepicker": LocalJSX.WebDatepicker & JSXBase.HTMLAttributes<HTMLWebDatepickerElement>;
            "web-modal": LocalJSX.WebModal & JSXBase.HTMLAttributes<HTMLWebModalElement>;
        }
    }
}
